from pywinauto.keyboard import send_keys
import datetime
import os
import sys
import io
import locale

import subprocess
import time
import psutil
import pyautogui
from pywinauto import Application, timings, Desktop, mouse
from pywinauto.findwindows import ElementNotFoundError
from const import IMAGE_PATH, APP_TITLE, APP_SIZE, LOG_FILE
from excel_parser import parse_excel_schedule, TrainScheduleEntry

def arm_window_connect(self):
    arm_app = None
    arm_window = None

    # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ–∫–æ–Ω
    try:
        desktop = Desktop(backend="uia")
        for window in desktop.windows():
            title = window.window_text()
            if "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞" in title:
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞: {title}")
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ü–µ—Å—Å—É —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
                window_pid = window.process_id()
                arm_app = Application(backend="uia").connect(process=window_pid)
                arm_window = arm_app.window(title_re=".*–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.*")
                return arm_window
    except Exception as search_err:
        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–∫–Ω–∞: {search_err}")

    # –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—ã—à–µ)
    if not arm_app:
        try:
            arm_app = Application(backend="uia").connect(title_re=".*–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.*", timeout=10)
            arm_window = arm_app.window(title_re=".*–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.*")
            self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return arm_window
        except Exception as connect_err:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞: {connect_err}")
            return None

    if not arm_window:
        self.log("‚ùå –û–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    self.log("‚úÖ –û–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ")
    arm_window.wait('ready', timeout=10)
    self.log("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
    return arm_window

def start_client(self):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å ClientManager –∏ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞."""
    try:
        # 1. –ó–∞–ø—É—Å–∫ Client Manager
        self.log("üîÑ –ó–∞–ø—É—Å–∫ Client Manager...")
        app = Application(backend="uia").start(r"C:\ClientManager\ClientsCache\ClientManager\ClientManager.exe")
        time.sleep(5)
        
        # 2. –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        clientmanager = app.window(title_re=".*–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.*")
        if clientmanager.exists():
            self.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–∏–ª –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"')
        else:
            self.log('‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–∫–Ω–æ "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"')
            return
            
        apply = clientmanager.child_window(auto_id="btnOk")
        if apply.exists():
            self.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–∏–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"')
            apply.click()
            self.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞')
        else:
            self.log('‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"')
            return
            
        time.sleep(2)
        
        # 3. –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"
        window_client = app.window(title_re=".*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.*")
        time.sleep(2)
        if window_client.exists():
            self.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–∏–ª –æ–∫–Ω–æ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"')
        else:
            self.log('‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–∫–Ω–æ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"')
            return

        # 4. –ü–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"
            app_client = Application(backend="uia").connect(title_re=".*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º.*", timeout=20)
            main_window = app_client.window(title_re=".*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º.*")
            main_window.wait('visible', timeout=7)
            
            # –ü–æ–∏—Å–∫ —Å–ø–∏—Å–∫–∞
            list_view = main_window.child_window(
                class_name="WindowsForms10.SysListView32.app.0.378734a",
                control_type="List"
            )
            
            if not list_view.exists():
                self.log("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞"
            target_item = None
            items = list_view.descendants(control_type="ListItem")
            
            for item in items:
                item_text = item.window_text()
                self.log(f"–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞: {item_text}")
                if "–ù–∞—Ä—è–¥—á–∏–∫–∞" in item_text:
                    target_item = item
                    self.log(f'‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞": {item_text}')
                    break
            
            if target_item:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞
                try:
                    # –ú–µ—Ç–æ–¥ 1: –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
                    target_item.click_input(double=True)
                    self.log("‚úÖ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except Exception as click_err:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {click_err}")
                    try:
                        # –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π + –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                        target_item.click_input(button='right')
                        time.sleep(0.5)
                        # –ò—â–µ–º –ø—É–Ω–∫—Ç "–ó–∞–ø—É—Å—Ç–∏—Ç—å" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é
                        context_menu = app_client.window(title_re=".*")
                        run_item = context_menu.child_window(title="–ó–∞–ø—É—Å—Ç–∏—Ç—å", control_type="MenuItem")
                        if run_item.exists():
                            run_item.click_input()
                            self.log("‚úÖ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é")
                        else:
                            self.log("‚ùå –ü—É–Ω–∫—Ç '–ó–∞–ø—É—Å—Ç–∏—Ç—å' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    except Exception as context_err:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {context_err}")
                        # –ú–µ—Ç–æ–¥ 3: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
                        try:
                            from pywinauto import mouse
                            rect = target_item.rectangle()
                            center_x = rect.left + (rect.width() // 2)
                            center_y = rect.top + (rect.height() // 2)
                            mouse.double_click(coords=(center_x, center_y))
                            self.log("‚úÖ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        except Exception as coord_err:
                            self.log(f"‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {coord_err}")
                            return
            else:
                self.log("‚ùå –≠–ª–µ–º–µ–Ω—Ç '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                return

        except Exception as ex:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–∫–Ω–æ–º '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º': {str(ex)}")
            return

        # 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞
        self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞...")
        time.sleep(5)

        # 6. –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞"
        self.log("üîç –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞'...")
        
        arm_window = arm_window_connect(self)
        if not arm_window:
            return

        # 7. –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è" - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
        self.log("üîç –ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è'...")
        
        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã MenuBar –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–≤—ã–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º
        try:
            menu_bars = arm_window.children(control_type="MenuBar")
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(menu_bars)} —Å—Ç—Ä–æ–∫(–∏) –º–µ–Ω—é")
            
            schedules_menu = None
            menu_strip = None
            
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ MenuBar
            for i, mb in enumerate(menu_bars):
                self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ MenuBar #{i+1}")
                try:
                    # –ò—â–µ–º –ø—É–Ω–∫—Ç "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è" –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é
                    potential_schedules = mb.child_window(title="–†–∞—Å–ø–∏—Å–∞–Ω–∏—è", control_type="MenuItem")
                    if potential_schedules.exists():
                        schedules_menu = potential_schedules
                        menu_strip = mb
                        self.log(f"‚úÖ –ü—É–Ω–∫—Ç '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è' –Ω–∞–π–¥–µ–Ω –≤ MenuBar #{i+1}")
                        break
                except Exception as mb_err:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MenuBar #{i+1}: {mb_err}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ child_window, –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
            if not schedules_menu:
                self.log("‚ö†Ô∏è –ü—É–Ω–∫—Ç '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MenuBar, –∏—â—É –Ω–∞–ø—Ä—è–º—É—é...")
                schedules_menu = arm_window.child_window(title="–†–∞—Å–ø–∏—Å–∞–Ω–∏—è", control_type="MenuItem")
                
        except Exception as menu_search_err:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ MenuBar: {menu_search_err}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–± - –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é
            schedules_menu = arm_window.child_window(title="–†–∞—Å–ø–∏—Å–∞–Ω–∏—è", control_type="MenuItem")

        if schedules_menu and schedules_menu.exists():
            self.log("‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è' –Ω–∞–π–¥–µ–Ω.")
            self.log("üñ±Ô∏è –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è'...")
            schedules_menu.click_input()
            self.log("‚úÖ –ö–ª–∏–∫ –ø–æ '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è' –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            self.log("‚ùå –ü—É–Ω–∫—Ç –º–µ–Ω—é '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è' –ù–ï –ù–ê–ô–î–ï–ù!")
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ MenuItem
            try:
                all_menu_items = arm_window.descendants(control_type="MenuItem")
                self.log("üîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:")
                for i, item in enumerate(all_menu_items):
                    item_text = item.window_text()
                    if item_text.strip():  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        self.log(f"  {i+1}. '{item_text}'")
            except Exception as diag_err:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–Ω—é: {diag_err}")
            return

        # 8. –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–º–µ–Ω—é "–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°"
        self.log("üîç –ü–æ–∏—Å–∫ –ø–æ–¥–º–µ–Ω—é '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°'...")
        mvs_schedule_item = arm_window.child_window(title="–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°", control_type="MenuItem")

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é)
        from pywinauto.timings import wait_until_passes
        try:
            wait_until_passes(7, 0.5, lambda: mvs_schedule_item.exists())
            self.log("‚úÖ –ü–æ–¥–º–µ–Ω—é '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°' –Ω–∞–π–¥–µ–Ω–æ.")
            self.log("üñ±Ô∏è –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°'...")
            mvs_schedule_item.click_input()
            self.log("‚úÖ –ö–ª–∏–∫ –ø–æ '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°' –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            self.log("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        except Exception as e:
            self.log(f"‚ùå –ü–æ–¥–º–µ–Ω—é '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°' –ù–ï –ù–ê–ô–î–ï–ù–û –∏–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å: {str(e)}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            try:
                schedules_menu.click_input()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
                time.sleep(1)
                submenu_items = arm_window.descendants(control_type="MenuItem")
                self.log("üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è':")
                for item in submenu_items:
                    item_text = item.window_text()
                    if item_text.strip() and "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è" not in item_text:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –ø—É–Ω–∫—Ç "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è"
                        self.log(f"  - '{item_text}'")
            except Exception as submenu_err:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–º–µ–Ω—é: {submenu_err}")

    except Exception as e:
        self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ: {str(e)}")
        import traceback
        self.log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

def open_image(app_instance):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –æ–∫–Ω–∞"""
    try:
        if not os.path.exists(app_instance.IMAGE_PATH):
            app_instance.log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {app_instance.IMAGE_PATH}")
            return

        app_instance.log("üñ±Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        subprocess.Popen(f'explorer "{app_instance.IMAGE_PATH}"', shell=True)
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–∫–æ–Ω
            app = None
            window_titles = [
                ".*–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.*",
                ".*Photos.*",
                ".*–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.*",
                ".*Viewer.*"
            ]

            for title in window_titles:
                try:
                    app = Application(backend="uia").connect(title_re=title)
                    break
                except ElementNotFoundError:
                    continue

            if app:
                app_instance.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–∫–Ω–∞ –∑–¥–µ—Å—å
            else:
                app_instance.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–∫–Ω—É –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞")
                app_instance.log("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é")

        except Exception as e:
            app_instance.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é: {str(e)}")

    except Exception as e:
        app_instance.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def get_toolbar_button_by_index(arm_window, physical_index_in_toolbar):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏–∑ toolStrip1 –ø–æ –µ—ë —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É –≤ —Ç—É–ª–±–∞—Ä–µ.
    –ò—â–µ—Ç toolStrip1 –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ FrmMVPSTimetable.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±.

    :param arm_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.
    :param physical_index_in_toolbar: –§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏ –≤ toolStrip1 (–Ω–∞—á–∏–Ω–∞—è —Å 0).
    :return: –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    try:
        print(f"--- –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º {physical_index_in_toolbar} ---")

        # 1. –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ "–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°" –ø–æ –µ–≥–æ AutomationId.
        frm_mvsp_timetable_spec = arm_window.child_window(
            auto_id="FrmMVPSTimetable",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_id
            control_type="Window",
            found_index=0
        )
        frm_mvsp_timetable_spec.wait('exists', timeout=7)
        print("‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–∫–Ω–∞ FrmMVPSTimetable –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        frm_mvsp_timetable = frm_mvsp_timetable_spec.wrapper_object()
        print("‚úÖ –û–±—ä–µ–∫—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–∫–Ω–∞ FrmMVPSTimetable –ø–æ–ª—É—á–µ–Ω.")

        # 2. –í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Ö–æ–¥–∏–º toolStrip1.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_id –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏.
        toolstrip_spec = frm_mvsp_timetable_spec.child_window(
            auto_id="ts1",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_id –¥–ª—è toolStrip1
            control_type="ToolBar",
            found_index=0
        )
        toolstrip_spec.wait('exists', timeout=7)
        toolstrip = toolstrip_spec.wrapper_object()
        print("‚úÖ ToolStrip1 –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ FrmMVPSTimetable –ø–æ AutoId.")

        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• –ø–æ—Ç–æ–º–∫–æ–≤ toolStrip1.
        # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ç—É–ª–±–∞—Ä–µ.
        all_toolbar_children = toolstrip.children()
        print(f"   –í toolStrip1 –Ω–∞–π–¥–µ–Ω–æ {len(all_toolbar_children)} –ø–æ—Ç–æ–º–∫–æ–≤.")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        if 0 <= physical_index_in_toolbar < len(all_toolbar_children):
            button = all_toolbar_children[physical_index_in_toolbar]
            # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –≤—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            try:
                btn_title = button.window_text()
                btn_ctrl_type = button.element_info.control_type
                print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º {physical_index_in_toolbar} –Ω–∞–π–¥–µ–Ω.")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: '{btn_title}'")
                print(f"   –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: '{btn_ctrl_type}'")
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∫–Ω–æ–ø–∫–æ–π. –≠—Ç–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
                # –ï—Å–ª–∏ –æ–Ω –Ω–µ –∫–Ω–æ–ø–∫–∞, —ç—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ç–∏–ø—É.
            except Exception as info_err:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ: {info_err}")
            print("--- –ö–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ ---")
            return button
        else:
            print(
                f"‚ùå –§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å {physical_index_in_toolbar} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–º–∫–æ–≤ (0-{len(all_toolbar_children) - 1}).")
            # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–µ–¥–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for i, child in enumerate(all_toolbar_children):
                try:
                    child_title = child.window_text()
                    child_ctrl_type = child.element_info.control_type
                    print(f"      –≠–ª–µ–º–µ–Ω—Ç #{i}: '{child_title}' (–¢–∏–ø: {child_ctrl_type})")
                except Exception as child_err:
                    print(f"      –≠–ª–µ–º–µ–Ω—Ç #{i}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ({child_err})")
            print("--- –ö–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ ---")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º {physical_index_in_toolbar}: {e}")
        import traceback
        print(traceback.format_exc())
        print("--- –ö–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ ---")
        return None


def find_exact_row(self, arm_window, expected_route_name="–ü—Ä–æ–±–Ω—ã–π –ú–¶–î-1"):
    """
    –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ grMain –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ "–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°".
    :param arm_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.
    :param expected_route_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :return: –ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ None.
    """
    try:
        print("--- –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ ---")
        # --- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –æ–∫–Ω–æ FrmMVPSTimetable ---
        print("1. –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°'...")
        frm_mvsp_timetable = arm_window.child_window(
            title="–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°",
            control_type="Window"
        ).wait('exists', timeout=15)
        print("   ‚úÖ –û–∫–Ω–æ '–ì—Ä–∞—Ñ–∏–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ú–í–ü–°' –Ω–∞–π–¥–µ–Ω–æ.")

        # --- –®–∞–≥ 2: –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É grMain –ø–æ AutomationId ---
        print("2. –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã 'grMain'...")
        data_grid = None
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞
        all_tables = frm_mvsp_timetable.descendants(control_type="Table")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(all_tables)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ AutomationId
        for i, table in enumerate(all_tables):
            try:
                # –í–ê–ñ–ù–û: automation_id() —ç—Ç–æ –ú–ï–¢–û–î, –µ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å!
                table_auto_id = table.automation_id()
                print(f"   –¢–∞–±–ª–∏—Ü–∞ {i}: AutomationId = '{table_auto_id}'")
                if table_auto_id == "grMain":
                    data_grid = table
                    print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'grMain' –Ω–∞–π–¥–µ–Ω–∞ –ø–æ AutomationId!")
                    break
            except Exception as table_check_err:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {i}: {table_check_err}")
                continue

        if not data_grid:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü–∞ 'grMain' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            # frm_mvsp_timetable.print_control_identifiers() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return None

        # --- –®–∞–≥ 3: –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É ---
        print("3. –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ...")
        # –ò—â–µ–º –í–°–ï–• –ø—Ä—è–º—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å KeyError
        # –ü–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        all_children = data_grid.children()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä—è–º—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: {len(all_children)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Ç–æ–º–∫–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏.
        # –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å DataItem –∏–ª–∏ CustomControl.
        # –¢–∞–∫ –∫–∞–∫ –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –≤ children() –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å KeyError,
        # –º—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        potential_rows = []
        for child in all_children:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ element_info
                ctrl_type = child.element_info.control_type
                # –ü–µ—á–∞—Ç–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ)
                # print(f"     –ü–æ—Ç–æ–º–æ–∫: {child.window_text()}, –¢–∏–ø: {ctrl_type}")
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–∞–º —Å—Ç—Ä–æ–∫. 'DataItem' –∏ 'CustomControl'
                # —ç—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
                # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏.
                # UIA_DataItemControlTypeId = 0xC364 (50020)
                # UIA_CustomControlTypeId = 0xC367 (50023) - –º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏
                # –ù–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞.
                if "DataItem" in ctrl_type or "Custom" in ctrl_type:  # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    potential_rows.append(child)
            except Exception as filter_err:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                print(f"     ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç–æ–º–∫–∞: {filter_err}")
                continue

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–¥–µ–∂–Ω–∞,
        # –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ Legacy.Value.
        # potential_rows = all_children

        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {len(potential_rows)}")

        if not potential_rows:
            print("   ‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏).")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            potential_rows = all_children
            print(f"   –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ {len(potential_rows)} –ø–æ—Ç–æ–º–∫–æ–≤ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.")

        # --- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—é ---
        print(f"4. –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å Legacy.Value —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{expected_route_name}'...")
        for i, row in enumerate(potential_rows):
            try:
                # –ü–æ–ª—É—á–∞–µ–º Legacy.Value
                legacy_value = ""
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ legacy_properties
                    legacy_props = row.legacy_properties()
                    legacy_value = legacy_props.get('Value', '')
                except Exception as get_legacy_err:
                    print(f"     ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Legacy.Value —É —Å—Ç—Ä–æ–∫–∏ {i}: {get_legacy_err}")
                    continue  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É

                # print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ {i}: Legacy.Value = '{legacy_value}'") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º str() –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ legacy_value –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if expected_route_name in str(legacy_value):
                    self.log(f"     ‚úÖ –ù–ê–ô–î–ï–ù–ê –°–¢–†–û–ö–ê {i}, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è '{expected_route_name}'!")
                    print(
                        f"     –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: –ò–º—è='{row.window_text()}', –¢–∏–ø='{row.element_info.control_type}'")
                    return row

            except Exception as row_error:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {row_error}")
                continue

        print(f"   ‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ —Å Legacy.Value —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{expected_route_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        self.log('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞')
        import traceback
        traceback.print_exc()
        return None
    finally:
        print("--- –ö–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ ---")


def get_input_field(self, arm_window, expected_route_name="–ü—Ä–æ–±–Ω—ã–π –ú–¶–î-1"):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º toolStrip2
        tool_strip2 = arm_window.child_window(
            title="toolStrip2",
            control_type="ToolBar"
        ).wait('exists', timeout=10)

        # 2. –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ —Ç—É–ª–±–∞—Ä–µ
        edit_controls = tool_strip2.descendants(
            control_type="Edit",
            class_name="WindowsForms10.EDIT.app.0.378734a"
        )

        # 3. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        for edit in edit_controls:
            try:
                rect = edit.rectangle()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø–æ–¥—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
                coord_ok = (100 <= rect.left <= 200 and 100 <= rect.top <= 150)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
                next_ctrl = edit.next_sibling()
                next_ok = next_ctrl and "DateTime" in next_ctrl.class_name()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                prev_ctrl = edit.previous_sibling()
                prev_ok = prev_ctrl and "Label" in prev_ctrl.class_name()

                if coord_ok and (next_ok or prev_ok):
                    edit.draw_outline(colour='green', thickness=2)
                    return edit

            except Exception as e:
                continue

        # 4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
        for edit in edit_controls:
            try:
                if "–Ω–∞–∑–≤–∞–Ω–∏–µ" in edit.legacy_properties().get('HelpText', '').lower():
                    return edit
            except:
                continue

        # 5. –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ/–≤—Ç–æ—Ä–æ–µ)
        if len(edit_controls) >= 1:
            return edit_controls[0]  # –∏–ª–∏ 1 –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—è: {e}")

    # 6. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    try:
        coords = (150, 120)  # –ü–æ–¥—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        mouse.click(coords=coords)
        time.sleep(0.5)

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ñ–æ–∫—É—Å–æ–º
        focused = Application(backend="uia").connect(active=True).window()
        if "EDIT" in focused.class_name():
            return focused
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {e}")

    return None


def chart_finding(self, arm_window, route_name_from_excel):
    """
    –ò—â–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.

    :param self: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ log –∏ —Ç.–¥.
    :param arm_window: –û–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.
    :param route_name_from_excel: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ A Excel).
    """
    # --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º route_name_from_excel –≤–º–µ—Å—Ç–æ "–ü—Ä–æ–±–Ω—ã–π –ú–¶–î-1"
    input_field = get_input_field(self, arm_window, expected_route_name=route_name_from_excel)

    # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if input_field:
        self.log("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ")
        input_field.set_text("")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        # –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ route_name_from_excel –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è send_keys
        input_field.type_keys(route_name_from_excel + "{ENTER}", with_spaces=True)
        self.log(f"‚úÖ –í–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: '{route_name_from_excel}'")
    else:
        self.log("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    # –ü–µ—Ä–µ–¥–∞—ë–º route_name_from_excel –≤ find_exact_row
    row = find_exact_row(self, arm_window, expected_route_name=route_name_from_excel)
    if row:
        self.log("‚úÖ row is finded!")
        # TODO: –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
        return row  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞
    else:
        self.log("‚ÑπÔ∏è Row is not found, creating...")
        add_button = get_toolbar_button_by_index(arm_window, 3)
        if not add_button:
            self.log("‚ùå –ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º click_input –≤–º–µ—Å—Ç–æ click –¥–ª—è –æ–±—Ö–æ–¥–∞ COMError
            add_button.click_input()
            self.log("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–î–æ–±–∞–≤–∏—Ç—å' –≤—ã–ø–æ–ª–Ω–µ–Ω (click_input).")
        except Exception as click_err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ click_input: {click_err}")
            # –ï—Å–ª–∏ click_input –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π click –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å
            try:
                add_button.click()
                self.log("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–î–æ–±–∞–≤–∏—Ç—å' –≤—ã–ø–æ–ª–Ω–µ–Ω (click).")
            except Exception as click_err2:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ click: {click_err2}")
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ '–î–æ–±–∞–≤–∏—Ç—å' –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º.")
                return False

        try:
            # --- –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" ---
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            process_id = arm_window.process_id()
            app_for_new_window = Application(backend="uia").connect(process=process_id)
            main_window = app_for_new_window.window(title="–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", control_type="Window")
            self.log("‚úÖ main_window is went")

            # –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–∫–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
            time.sleep(2)

            # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ AutomationId (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
            # –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è arm_window, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.
            input_field_new_record = arm_window.child_window(
                auto_id="edtLastName",
                control_type="Edit",
                class_name="WindowsForms10.EDIT.app.0.378734a"
            )
            if input_field_new_record.exists():
                self.log("‚úÖ input_field is inited")

            if not input_field_new_record.exists():
                self.log("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                raise Exception("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            input_field_new_record.set_focus()
            input_field_new_record.set_text("")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            time.sleep(0.3)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Excel
            input_field_new_record.type_keys(route_name_from_excel, with_spaces=True)
            self.log(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ –≤ –æ–∫–Ω–µ '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å': '{route_name_from_excel}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            # def wait_until(timeout, interval, condition):
            #     end_time = time.time() + timeout
            #     while time.time() < end_time:
            #         if condition():
            #             return True
            #         time.sleep(interval)
            #     return False
            # if not wait_until(5, 0.5, lambda: route_name_from_excel in (input_field_new_record.get_value() or "")):
            #      self.log("‚ö†Ô∏è –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

            # 3. –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" (–ø–æ AutomationId)
            apply_button = arm_window.child_window(
                auto_id="btnOk",
                title="–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                control_type="Button"
            )
            if apply_button.exists():
                self.log("‚úÖ apply was")

            if not apply_button.exists():
                self.log("‚ùå –ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                raise Exception("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # 4. –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            apply_button.wait('enabled', timeout=5)
            apply_button.click_input()

            self.log("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            main_window.wait_not('visible', timeout=10)
            self.log("‚úÖ –û–∫–Ω–æ '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å' –∑–∞–∫—Ä—ã—Ç–æ.")
            newly_created_row = find_exact_row(self, arm_window, expected_route_name=route_name_from_excel)
            if newly_created_row:
                self.log("‚úÖ –í–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'.")
                return newly_created_row
            else:
                self.log("‚ö†Ô∏è –í–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å', –Ω–æ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.")
                # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å True –∏–ª–∏ None, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å None, primary_work –ø—Ä–æ–ø—É—Å—Ç–∏—Ç period_schedule
                # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å True, –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ primary_work
                return True

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–∫–Ω–æ–º '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å': {str(e)}")
            import traceback
            self.log(traceback.format_exc())
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            # if 'input_field_new_record' in locals() and input_field_new_record.exists():
            #     self.log(f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {input_field_new_record.get_value()}")
            # if 'main_window' in locals() and main_window.exists():
            #     self.log("‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã –æ–∫–Ω–∞ '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å':")
            #     main_window.print_control_identifiers()
            return False


def period_schedule(self, arm_window, row, date):
    """
    :param self: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –ª–æ–≥–≥–µ—Ä–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    :param arm_window: –û–∫–Ω–æ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.
    :param row: –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç find_exact_row).
    :param date: –û–±—ä–µ–∫—Ç datetime, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ Excel.
    """
    # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–Ω—è, –º–µ—Å—è—Ü–∞, –≥–æ–¥–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ datetime ---
    day_int = date.day
    month_int = date.month
    year_int = date.year
    # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)
    day_str = f"{day_int:02d}"
    month_str = f"{month_int:02d}"
    year_str = f"{year_int}"
    # –î–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—è—Ü–∞ (–±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ –Ω—É–ª—è, 1-12)
    month_search_int = month_int
    self.log(f"üìÖ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {day_str}.{month_str}.{year_str}")

    # --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    row_children = row.children()

    # –ï—Å–ª–∏ –ø–æ—Ç–æ–º–∫–∏ –µ—Å—Ç—å, –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É
    if row_children:
        first_cell = row_children[0]
        first_cell.click_input()
        self.log("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    else:
        # –ï—Å–ª–∏ –ø–æ—Ç–æ–º–∫–æ–≤ –Ω–µ—Ç, –∫–ª–∏–∫–∞–µ–º –ø–æ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–µ
        row.click_input()
        self.log("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

    period_button = get_toolbar_button_by_index(arm_window, 6)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å 6 –¥–ª—è "–ü–µ—Ä–∏–æ–¥"
    if period_button:
        period_button.click_input()
        self.log("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–ü–µ—Ä–∏–æ–¥' –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    else:
        self.log("‚ùå –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–∏–æ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return  # –ò–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É

    # --- –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è" ---
    try:
        # –ò—â–µ–º –æ–∫–Ω–æ "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è" –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ arm_window
        period_window = arm_window.child_window(
            auto_id="FrmMVPSTimetableSched",
            control_type="Window"
        )

        self.log("‚úÖ –û–∫–Ω–æ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è' –Ω–∞–π–¥–µ–Ω–æ.")

        # --- 1. –†–∞–±–æ—Ç–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º "–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" ---
        try:
            # –ò—â–µ–º —á–µ–∫–±–æ–∫—Å "–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è"
            allow_changes_checkbox = period_window.child_window(
                title="–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                control_type="CheckBox"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
            if allow_changes_checkbox.exists(timeout=5):
                self.log("‚úÖ –ß–µ–∫–±–æ–∫—Å '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –Ω–∞–π–¥–µ–Ω.")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ ToggleState (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
                try:
                    toggle_state = allow_changes_checkbox.get_toggle_state()
                    is_checked = (toggle_state == 1)  # ToggleState: 1 - On
                    self.log(
                        f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞: {'–û—Ç–º–µ—á–µ–Ω' if is_checked else '–ù–µ –æ—Ç–º–µ—á–µ–Ω'} (ToggleState: {toggle_state})")
                except Exception:
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ LegacyIAccessible.State
                    try:
                        legacy_props = allow_changes_checkbox.legacy_properties()
                        state = legacy_props.get('State', 0)
                        is_checked = bool(state & 0x10)  # CHECKED flag
                        self.log(
                            f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞: {'–û—Ç–º–µ—á–µ–Ω' if is_checked else '–ù–µ –æ—Ç–º–µ—á–µ–Ω'} (Legacy State: {hex(state)})")
                    except Exception:
                        self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º '–ù–µ –æ—Ç–º–µ—á–µ–Ω'.")
                        is_checked = False

                # –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –ù–ï –æ—Ç–º–µ—á–µ–Ω, –∫–ª–∏–∫–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å
                if not is_checked:
                    self.log("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'...")
                    allow_changes_checkbox.click_input()
                    self.log("‚úÖ –ß–µ–∫–±–æ–∫—Å '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                else:
                    self.log("‚úÖ –ß–µ–∫–±–æ–∫—Å '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' —É–∂–µ –æ—Ç–º–µ—á–µ–Ω.")

            else:
                self.log("‚ùå –ß–µ–∫–±–æ–∫—Å '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –ù–ï –ù–ê–ô–î–ï–ù.")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω

        except Exception as checkbox_err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —á–µ–∫–±–æ–∫—Å–æ–º '–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è': {checkbox_err}")

        # --- 2. –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ "–ì–æ–¥" ---
        try:
            self.log("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ '–ì–æ–¥'...")

            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ toolStrip1 –≤–Ω—É—Ç—Ä–∏ period_window
            # –ò–∑ –¥–∞–º–ø–∞: AutomationId: "tsMain"
            toolstrip = period_window.child_window(
                auto_id="tsMain",
                control_type="ToolBar"
            )
            if toolstrip.exists():
                self.log("‚úÖ –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 'toolStrip1' –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                self.log(" –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 'toolStrip1' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # –ù–∞–π–¥–µ–º –º–µ—Ç–∫—É "–ì–æ–¥:" (—ç—Ç–æ TextBlock)
            year_label = toolstrip.child_window(
                title="–ì–æ–¥:",
                control_type="Text"
            )
            if year_label.exists():
                self.log("‚úÖ –ú–µ—Ç–∫–∞ '–ì–æ–¥:' –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                self.log("–ú–µ—Ç–∫–∞ '–ì–æ–¥:' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # –ù–∞–π–¥–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è *–ø–æ—Å–ª–µ* –º–µ—Ç–∫–∏ "–ì–æ–¥:"
            # –ò–∑ –¥–∞–º–ø–∞ –≤–∏–¥–Ω–æ, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –º–µ—Ç–∫–∏.
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å next_sibling(), –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –Ω–∞–π—Ç–∏ –≤—Å–µ Edit –≤–Ω—É—Ç—Ä–∏ toolstrip –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ.

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1: –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Å–µ–¥—Å—Ç–≤—É (–µ—Å–ª–∏ next_sibling —Ä–∞–±–æ—Ç–∞–µ—Ç)
            # year_input_candidate = year_label.next_sibling(control_type="Edit")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Edit –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            edit_fields_in_toolbar = toolstrip.descendants(control_type="Edit")
            year_input = None

            if edit_fields_in_toolbar:
                label_rect = year_label.rectangle()
                # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∞–≤–µ–µ –º–µ—Ç–∫–∏ "–ì–æ–¥:"
                for edit_field in edit_fields_in_toolbar:
                    try:
                        edit_rect = edit_field.rectangle()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª–µ –ø—Ä–∞–≤–µ–µ –º–µ—Ç–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ –ø–æ Y
                        if (edit_rect.left > label_rect.right and
                                abs(edit_rect.top - label_rect.top) < 10):  # –î–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ Y
                            year_input = edit_field
                            break
                    except Exception as rect_err:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞: {rect_err}")
                        continue

            if year_input:
                self.log("‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ '–ì–æ–¥' –Ω–∞–π–¥–µ–Ω–æ.")
                # –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º –≥–æ–¥
                year_input.set_text("")  # –û—á–∏—â–∞–µ–º
                time.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                year_input.type_keys(year_str)  # –í–≤–æ–¥–∏–º –≥–æ–¥
                self.log(f"‚úÖ –í –ø–æ–ª–µ '–ì–æ–¥' –≤–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {year_str}")
            else:
                self.log("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ '–ì–æ–¥' –ù–ï –ù–ê–ô–î–ï–ù–û.")
                # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ

        except Exception as year_input_err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ '–ì–æ–¥': {year_input_err}")
            import traceback
            self.log(traceback.format_exc())

        # --- 3. –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π grCalendar ---
        try:
            self.log("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è 'grCalendar'...")

            # –ù–∞–π–¥–µ–º –ø–∞–Ω–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π (AutomationId: "pnMain")
            calendar_panel = period_window.child_window(
                auto_id="pnMain",
                control_type="Pane"
            )
            if calendar_panel:
                self.log("‚úÖ –ü–∞–Ω–µ–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è 'pnMain' –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                self.log("–ü–∞–Ω–µ–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è 'pnMain' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # –ù–∞–π–¥–µ–º —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—É –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ (AutomationId: "grCalendar")
            calendar_table = calendar_panel.child_window(
                auto_id="grCalendar",
                control_type="Table"
            ).wait('exists', timeout=7)
            self.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è 'grCalendar' –Ω–∞–π–¥–µ–Ω–∞.")

            # --- 4. –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—è—Ü–∞ ---
            self.log(f"üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–∞: {month_search_int}...")

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –º–µ—Å—è—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ Legacy.Value —Å—Ç—Ä–æ–∫–∏
            # Legacy.Value —Å—Ç—Ä–æ–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: "–Ø–Ω–≤–∞—Ä—å;-;...;-"
            months_map = {
                1: "–Ø–Ω–≤–∞—Ä—å",
                2: "–§–µ–≤—Ä–∞–ª—å",
                3: "–ú–∞—Ä—Ç",
                4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π",
                6: "–ò—é–Ω—å",
                7: "–ò—é–ª—å",
                8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å",
                10: "–û–∫—Ç—è–±—Ä—å",
                11: "–ù–æ—è–±—Ä—å",
                12: "–î–µ–∫–∞–±—Ä—å"
            }
            target_month_name = months_map.get(month_search_int, "")
            target_month_row = None

            if not target_month_name:
                self.log(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: {month_search_int}")
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: {month_search_int}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–∫—Ä–æ–º–µ "–í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞")
            # –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∏–ø–æ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º.
            # –ò–∑ –¥–∞–º–ø–∞: Name: "–°—Ç—Ä–æ–∫–∞ 0", ControlType: –Ω–µ —É–∫–∞–∑–∞–Ω, Legacy.Role: —Å—Ç—Ä–æ–∫–∞ (0x1C)
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É—Å—è —Å "–°—Ç—Ä–æ–∫–∞"
            potential_month_rows = calendar_table.children()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä—è–º—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã

            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(potential_month_rows)}")

            for i, row_elem in enumerate(potential_month_rows):
                try:
                    row_name = row_elem.window_text()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–æ–π (–Ω–æ –Ω–µ "–í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞")
                    if row_name.startswith("–°—Ç—Ä–æ–∫–∞") and row_name != "–í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞":
                        # –ü–æ–ª—É—á–∞–µ–º Legacy.Value
                        legacy_props = row_elem.legacy_properties()
                        legacy_value = legacy_props.get('Value', '')
                        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ '{row_name}': Legacy.Value = '{legacy_value}'")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ Legacy.Value –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
                        if target_month_name in legacy_value:
                            target_month_row = row_elem
                            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –º–µ—Å—è—Ü–∞ '{target_month_name}': '{row_name}'")
                            break
                except Exception as row_check_err:
                    self.log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {row_check_err}")
                    continue

            if not target_month_row:
                self.log(f"‚ùå –°—Ç—Ä–æ–∫–∞ –¥–ª—è –º–µ—Å—è—Ü–∞ '{target_month_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
                raise Exception(f"–°—Ç—Ä–æ–∫–∞ –º–µ—Å—è—Ü–∞ '{target_month_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # --- 5. –ü–æ–∏—Å–∫ —è—á–µ–π–∫–∏ –¥–Ω—è ---
            self.log(f"üîç –ü–æ–∏—Å–∫ —è—á–µ–π–∫–∏ –¥–ª—è –¥–Ω—è: {day_int}...")
            target_day_cell = None

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—è—á–µ–π–∫–∏) –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—è—Ü–∞
            day_cells = target_month_row.children(control_type="DataItem")
            # –ò–∑ –¥–∞–º–ø–∞: Name: "1 –°—Ç—Ä–æ–∫–∞ 0", ControlType: DataItem
            self.log(f"   –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –º–µ—Å—è—Ü–∞: {len(day_cells)}")

            for cell in day_cells:
                try:
                    cell_name = cell.window_text()
                    # –ò–º—è —è—á–µ–π–∫–∏ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "{–¥–µ–Ω—å} –°—Ç—Ä–æ–∫–∞ {–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏}"
                    # –ù–∞–ø—Ä–∏–º–µ—Ä: "1 –°—Ç—Ä–æ–∫–∞ 0", "15 –°—Ç—Ä–æ–∫–∞ 3"
                    if cell_name.startswith(f"{day_int} –°—Ç—Ä–æ–∫–∞"):
                        target_day_cell = cell
                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ –¥–Ω—è {day_int}: '{cell_name}'")
                        break
                except Exception as cell_check_err:
                    self.log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–π–∫–∏: {cell_check_err}")
                    continue

            if not target_day_cell:
                self.log(f"‚ùå –Ø—á–µ–π–∫–∞ –¥–ª—è –¥–Ω—è {day_int} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ –º–µ—Å—è—Ü–∞.")
                raise Exception(f"–Ø—á–µ–π–∫–∞ –¥–Ω—è {day_int} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # --- 6. –ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ —è—á–µ–π–∫–µ ---
            self.log(f"üñ±Ô∏è –ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ —è—á–µ–π–∫–µ '{target_day_cell.window_text()}'...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º mouse.click –∏–∑ pywinauto –¥–ª—è –∫–ª–∏–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏
            cell_rect = target_day_cell.rectangle()
            center_x = cell_rect.left + (cell_rect.width() // 2)
            center_y = cell_rect.top + (cell_rect.height() // 2)

            # –ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
            mouse.click(button='right', coords=(center_x, center_y))
            self.log("‚úÖ –ö–ª–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

            # --- 7. –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é: –≤—ã–±–æ—Ä "–ó–∞–∫—Ä–µ–ø–∏—Ç—å" ---
            try:
                self.log("üîç –ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–∞ '–ó–∞–∫—Ä–µ–ø–∏—Ç—å' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é...")

                # –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç period_window.
                # –ò–∑ –¥–∞–º–ø–∞: "DropDown" –º–µ–Ω—é -> "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è" –æ–∫–Ω–æ
                # –ò—â–µ–º –º–µ–Ω—é "DropDown" –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è" (period_window)
                context_menu = period_window.child_window(
                    title="DropDown",  # –ò–º—è –∏–∑ –¥–∞–º–ø–∞
                    control_type="Menu"  # UIA_MenuControlTypeId
                )

                self.log("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é 'DropDown' –Ω–∞–π–¥–µ–Ω–æ.")

                # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø—É–Ω–∫—Ç "–ó–∞–∫—Ä–µ–ø–∏—Ç—å" –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ–Ω—é
                pin_menu_item = context_menu.child_window(
                    title="–ó–∞–∫—Ä–µ–ø–∏—Ç—å",
                    control_type="MenuItem"  # UIA_MenuItemControlTypeId
                )

                if pin_menu_item.exists():
                    self.log("‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é '–ó–∞–∫—Ä–µ–ø–∏—Ç—å' –Ω–∞–π–¥–µ–Ω.")

                    # –ö–ª–∏–∫–∞–µ–º –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ –ø—É–Ω–∫—Ç—É "–ó–∞–∫—Ä–µ–ø–∏—Ç—å"
                    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å click_input() –∏–ª–∏ invoke() (—Ç–∞–∫ –∫–∞–∫ IsInvokePatternAvailable: true)
                    # click_input() –æ–±—ã—á–Ω–æ –Ω–∞–¥–µ–∂–Ω–µ–µ
                    pin_menu_item.click_input()
                    self.log("‚úÖ –ö–ª–∏–∫ –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é '–ó–∞–∫—Ä–µ–ø–∏—Ç—å' –≤—ã–ø–æ–ª–Ω–µ–Ω.")

                else:
                    self.log("‚ùå –ü—É–Ω–∫—Ç –º–µ–Ω—é '–ó–∞–∫—Ä–µ–ø–∏—Ç—å' –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é.")
                    # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∫—Ä–∏—Ç–∏—á–µ–Ω

            except Exception as menu_err:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é: {menu_err}")
                import traceback
                self.log(traceback.format_exc())
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–µ–Ω—é, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ª–æ–≥–∏–∫–∏
                return  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏

            # --- 8. –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è" ---
            try:
                self.log("üö™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è'...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º period_window_spec, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–∞—Å –µ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                close_button_spec = period_window_spec.child_window(
                    automation_id="Close", # –ò—Å–ø–æ–ª—å–∑—É–µ–º AutomationId –∏–∑ –¥–∞–º–ø–∞
                    control_type="Button",
                    title="–ó–∞–∫—Ä—ã—Ç—å" # –î–æ–±–∞–≤–∏–º –∏–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                )
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º Wrapper
                close_button = close_button_spec.wait('exists', timeout=5)
                
                if close_button.exists():
                    close_button.click_input()
                    self.log("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è' –Ω–∞–∂–∞—Ç–∞.")
                    # –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è
                    period_window_spec.wait_not('visible', timeout=10)
                    self.log("‚úÖ –û–∫–Ω–æ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è' –∑–∞–∫—Ä—ã—Ç–æ.")
                else:
                    self.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è' –ù–ï –ù–ê–ô–î–ï–ù–ê.")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Alt+F4 –≤ –æ–∫–Ω–æ?
                    # period_window_spec.type_keys("%{F4}") 

            except Exception as close_period_err:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è': {close_period_err}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–∫–æ–Ω

        except Exception as table_err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π: {table_err}")
            import traceback
            self.log(traceback.format_exc())
            return  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏

        self.log("‚úÖ period_schedule (—á–∞—Å—Ç—å —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as window_err:
        self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–∫–Ω–æ–º '–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è': {window_err}")
        import traceback
        self.log(traceback.format_exc())
        return  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏



def primary_work(self):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."""
    self.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    try:
        # --- 1. –ü–∞—Ä—Å–∏–Ω–≥ Excel ---
        self.log("üìÇ –ü–∞—Ä—Å–∏–Ω–≥ Excel-—Ñ–∞–π–ª–∞...")
        try:
            schedule_entries = parse_excel_schedule() # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –ò–ª–∏ schedule_entries = parse_excel_schedule("–ø—É—Ç—å/–∫/–≤–∞—à–µ–º—É/—Ñ–∞–π–ª—É.xlsx")
        except FileNotFoundError as fnf_err:
            self.log(f"‚ùå {fnf_err}")
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        except Exception as parse_err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel: {parse_err}")
            import traceback
            self.log(traceback.format_exc())
            return

        if not schedule_entries:
            self.log("‚ö†Ô∏è –ò–∑ Excel –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–ª–±—Ü—ã A –∏–ª–∏ O –ø—É—Å—Ç—ã).")
            return

        self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(schedule_entries)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Excel.")

        # --- 2. –ó–∞–ø—É—Å–∫ Client Manager –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–†–ú ---
        self.log("üîÑ –ó–∞–ø—É—Å–∫ Client Manager –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞...")
        start_client(self) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        arm_window = arm_window_connect(self) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

        if not arm_window:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞.")
            return

        self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

        # --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ Excel ---
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if 'chart_finding' not in globals():
            self.log("‚ùå –§—É–Ω–∫—Ü–∏—è chart_finding –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if 'period_schedule' not in globals():
            self.log("‚ùå –§—É–Ω–∫—Ü–∏—è period_schedule –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        for i, entry in enumerate(schedule_entries):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –°–¢–û–õ–ë–¶–ê A (–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü) —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
            route_name = str(entry.col_A) if entry.col_A is not None else ""

            # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –°–¢–û–õ–ë–¶–ê O (15-–π —Å—Ç–æ–ª–±–µ—Ü) - –¥–∞—Ç–∞ ---
            raw_date_value = entry.col_O
            date_object = None
            if raw_date_value is not None and isinstance(raw_date_value, datetime.datetime): # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: datetime.datetime
                date_object = raw_date_value
                date_log_str = date_object.strftime('%d.%m.%Y')
            elif raw_date_value is not None:
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    date_object = datetime.datetime.strptime(str(raw_date_value), '%d.%m.%Y') # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: datetime.datetime.strptime
                    date_log_str = str(raw_date_value)
                except ValueError:
                    self.log(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {i + 1}: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{raw_date_value}'. –ü—Ä–æ–ø—É—â–µ–Ω–∞.")
                    continue
            else:
                self.log(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {i + 1}: –ü—É—Å—Ç–∞—è –¥–∞—Ç–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ O. –ü—Ä–æ–ø—É—â–µ–Ω–∞.")
                continue
            # --- –ö–æ–Ω–µ—Ü –∏–∑–≤–ª–µ—á–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã ---

            if not route_name:
                self.log(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {i + 1}/{len(schedule_entries)} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ A.")
                continue

            self.log(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {i + 1}/{len(schedule_entries)}: '{route_name}' (–î–∞—Ç–∞: {date_log_str}) ---")

            # --- –®–∞–≥ 1: –í—ã–∑–æ–≤ chart_finding ---
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É: chart_finding(self, arm_window, route_name_from_excel)
                row = chart_finding(self, arm_window, route_name_from_excel=route_name)
                if row:
                    self.log(f"‚úÖ chart_finding –¥–ª—è '{route_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∫–∏.")
                else:
                    self.log(f"‚ö†Ô∏è chart_finding –¥–ª—è '{route_name}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞?). –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å.")
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º period_schedule –¥–ª—è —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            except Exception as e:
                self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chart_finding –¥–ª—è '{route_name}': {e}")
                import traceback
                self.log(traceback.format_exc())
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º period_schedule –¥–ª—è —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ chart_finding

            # --- –®–∞–≥ 2: –í—ã–∑–æ–≤ period_schedule (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ row –∏ date_object –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã) ---
            if row and date_object: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏ row –Ω–µ None, –∏ date_object –Ω–µ None
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é period_schedule
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É: def period_schedule(self, arm_window, row, date):
                    period_schedule(self, arm_window, row, date_object)
                    self.log(f"‚úÖ period_schedule –¥–ª—è '{route_name}' —Å –¥–∞—Ç–æ–π '{date_log_str}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ period_schedule –¥–ª—è '{route_name}' —Å –¥–∞—Ç–æ–π '{date_log_str}': {e}")
                    import traceback
                    self.log(traceback.format_exc())
                    # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å
            elif not date_object:
                self.log(f"‚ÑπÔ∏è period_schedule –¥–ª—è '{route_name}' –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è: –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            else: # row is None
                self.log(f"‚ÑπÔ∏è period_schedule –¥–ª—è '{route_name}' –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ row –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            # import time
            # time.sleep(1) # –ù–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞

        self.log("üéâ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Excel –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–∏–ª–∏ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å).")

        # --- 4. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ---
        self.log("üö™ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        # --- 4.1 –ó–∞–∫—Ä—ã—Ç–∏–µ "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞" ---
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ arm_window –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if 'arm_window' in locals() and arm_window and arm_window.exists():
                self.log("üö™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞'...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞
                # –ù–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                # –õ—É—á—à–µ –∏—Å–∫–∞—Ç—å —Å–∞–º–æ –æ–∫–Ω–æ "–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞" –∏ –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–µ–º
                arm_window_title = arm_window.window_text()
                main_arm_window_spec = Application(backend="uia").connect(process=arm_window.process_id()).window(title=arm_window_title)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞
                arm_close_button_spec = main_arm_window_spec.child_window(
                    automation_id="Close", # –ò—Å–ø–æ–ª—å–∑—É–µ–º AutomationId –∏–∑ –¥–∞–º–ø–∞
                    control_type="Button",
                    title="–ó–∞–∫—Ä—ã—Ç—å"
                )
                
                if arm_close_button_spec.exists(timeout=5):
                    arm_close_button = arm_close_button_spec.wrapper_object()
                    arm_close_button.click_input()
                    self.log("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –Ω–∞–∂–∞—Ç–∞.")
                    
                    # –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è
                    try:
                        main_arm_window_spec.wait_not('visible', timeout=15)
                        self.log("‚úÖ –û–∫–Ω–æ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –∑–∞–∫—Ä—ã—Ç–æ.")
                    except:
                        self.log("‚ö†Ô∏è –û–∫–Ω–æ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—è–≤–∏–ª—Å—è –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).")
                        # –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º Alt+F4 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        try:
                            main_arm_window_spec.type_keys("%{F4}")
                            main_arm_window_spec.wait_not('visible', timeout=5)
                            self.log("‚úÖ –û–∫–Ω–æ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ Alt+F4.")
                        except:
                            self.log("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' —Å –ø–æ–º–æ—â—å—é Alt+F4 —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                else:
                    self.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –ù–ï –ù–ê–ô–î–ï–ù–ê. –ü—Ä–æ–±—É–µ–º Alt+F4.")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Alt+F4 –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                    try:
                        main_arm_window_spec.type_keys("%{F4}")
                        main_arm_window_spec.wait_not('visible', timeout=10)
                        self.log("‚úÖ –û–∫–Ω–æ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ Alt+F4.")
                    except:
                         self.log("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' —Å –ø–æ–º–æ—â—å—é Alt+F4 —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                         
            else:
                self.log("‚ÑπÔ∏è –û–∫–Ω–æ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞' —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        except Exception as close_arm_err:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ '–ê–†–ú –ù–∞—Ä—è–¥—á–∏–∫–∞': {close_arm_err}")

        # --- 4.2 –ó–∞–∫—Ä—ã—Ç–∏–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º" ---
        try:
            self.log("üö™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º'...")
            # –ù—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"
            client_manager_app = Application(backend="uia").connect(title_re=".*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º.*", timeout=5)
            client_manager_window = client_manager_app.window(title_re=".*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º.*")
            
            if client_manager_window.exists():
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" –≤ –æ–∫–Ω–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º"
                client_close_button_spec = client_manager_window.child_window(
                    automation_id="Close", # –ò—Å–ø–æ–ª—å–∑—É–µ–º AutomationId –∏–∑ –¥–∞–º–ø–∞
                    control_type="Button",
                    title="–ó–∞–∫—Ä—ã—Ç—å"
                )
                
                if client_close_button_spec.exists(timeout=5):
                    client_close_button = client_close_button_spec.wrapper_object()
                    client_close_button.click_input()
                    self.log("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –Ω–∞–∂–∞—Ç–∞.")
                    
                    # –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è
                    try:
                        client_manager_window.wait_not('visible', timeout=10)
                        self.log("‚úÖ –û–∫–Ω–æ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –∑–∞–∫—Ä—ã—Ç–æ.")
                    except:
                        self.log("‚ö†Ô∏è –û–∫–Ω–æ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
                        # –ü—Ä–æ–±—É–µ–º Alt+F4
                        try:
                            client_manager_window.type_keys("%{F4}")
                            client_manager_window.wait_not('visible', timeout=5)
                            self.log("‚úÖ –û–∫–Ω–æ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ Alt+F4.")
                        except:
                            self.log("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' —Å –ø–æ–º–æ—â—å—é Alt+F4 —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                else:
                    self.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –æ–∫–Ω–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –ù–ï –ù–ê–ô–î–ï–ù–ê. –ü—Ä–æ–±—É–µ–º Alt+F4.")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Alt+F4
                    try:
                        client_manager_window.type_keys("%{F4}")
                        client_manager_window.wait_not('visible', timeout=10)
                        self.log("‚úÖ –û–∫–Ω–æ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ Alt+F4.")
                    except:
                        self.log("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' —Å –ø–æ–º–æ—â—å—é Alt+F4 —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
                        
            else:
                 self.log("‚ÑπÔ∏è –û–∫–Ω–æ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è.")
                 
        except Exception as connect_close_client_err:
            self.log(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º': {connect_close_client_err}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.")
            
        self.log("üéâ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã (–∏–ª–∏ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–∫—Ä—ã—Ç—å).")

    except Exception as e:
        self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ primary_work: {e}")
        import traceback
        self.log(traceback.format_exc())


def open_in_paint(app_instance):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–≤–æ–π—Å—Ç–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Paint"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(app_instance.IMAGE_PATH):
            app_instance.log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {app_instance.IMAGE_PATH}")
            return

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Paint
        for proc in psutil.process_iter():
            if proc.name() == app_instance.PAINT_EXE:
                proc.kill()

        app_instance.log("üé® –ó–∞–ø—É—Å–∫–∞–µ–º Paint —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        timings.Timings.fast()

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Paint
        paint_app = Application(backend="uia").start(f'{app_instance.PAINT_EXE} "{app_instance.IMAGE_PATH}"')
        time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞

        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É Paint
            paint_window = paint_app.window(title_re=".* - Paint")
            app_instance.log("‚úÖ Paint —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é "–§–∞–π–ª"
            app_instance.log("üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é '–§–∞–π–ª'...")
            paint_window.menu_select("–§–∞–π–ª")
            time.sleep(0.5)

            # 2. –í—ã–±–∏—Ä–∞–µ–º "–°–≤–æ–π—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            app_instance.log("‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            paint_window.menu_select("–§–∞–π–ª -> –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            time.sleep(1)

            # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å–≤–æ–π—Å—Ç–≤
            props_dialog = paint_app.window(title="–°–≤–æ–π—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            width = props_dialog.child_window(auto_id="1148", control_type="Edit").window_text()
            height = props_dialog.child_window(auto_id="1149", control_type="Edit").window_text()
            units = props_dialog.child_window(auto_id="1152", control_type="ComboBox").selected_text()

            app_instance.log(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height} {units}")

            # 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–≤–æ–π—Å—Ç–≤
            props_dialog.cancel.click()
            time.sleep(0.5)

            # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º Paint
            paint_window.close()
            app_instance.log("üñåÔ∏è –†–∞–±–æ—Ç–∞ —Å Paint –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except ElementNotFoundError as e:
            app_instance.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            try:
                send_keys('%–§')  # Alt+–§ (–º–µ–Ω—é –§–∞–π–ª)
                send_keys('–°')  # –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                time.sleep(1)
                app_instance.log("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–æ–π—Å—Ç–≤")
            except Exception as kbd_ex:
                app_instance.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {str(kbd_ex)}")

    except Exception as e:
        app_instance.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
